package com.squareup.square.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonGetter;


/**
 * This is a model class for InventoryPhysicalCount type.
 */
public class InventoryPhysicalCount {

    /**
     * Initialization constructor.
     * @param id
     * @param referenceId
     * @param catalogObjectId
     * @param catalogObjectType
     * @param state
     * @param locationId
     * @param quantity
     * @param source
     * @param employeeId
     * @param occurredAt
     * @param createdAt
     */
    @JsonCreator
    public InventoryPhysicalCount(
            @JsonProperty("id") String id,
            @JsonProperty("reference_id") String referenceId,
            @JsonProperty("catalog_object_id") String catalogObjectId,
            @JsonProperty("catalog_object_type") String catalogObjectType,
            @JsonProperty("state") String state,
            @JsonProperty("location_id") String locationId,
            @JsonProperty("quantity") String quantity,
            @JsonProperty("source") SourceApplication source,
            @JsonProperty("employee_id") String employeeId,
            @JsonProperty("occurred_at") String occurredAt,
            @JsonProperty("created_at") String createdAt) {
        this.id = id;
        this.referenceId = referenceId;
        this.catalogObjectId = catalogObjectId;
        this.catalogObjectType = catalogObjectType;
        this.state = state;
        this.locationId = locationId;
        this.quantity = quantity;
        this.source = source;
        this.employeeId = employeeId;
        this.occurredAt = occurredAt;
        this.createdAt = createdAt;
    }

    private final String id;
    private final String referenceId;
    private final String catalogObjectId;
    private final String catalogObjectType;
    private final String state;
    private final String locationId;
    private final String quantity;
    private final SourceApplication source;
    private final String employeeId;
    private final String occurredAt;
    private final String createdAt;
    /**
     * Getter for Id.
     * A unique ID generated by Square for the
     * [InventoryPhysicalCount](#type-inventoryphysicalcount).
     */
    @JsonGetter("id")
    public String getId() {
        return this.id;
    }

    /**
     * Getter for ReferenceId.
     * An optional ID provided by the application to tie the
     * [InventoryPhysicalCount](#type-inventoryphysicalcount) to an external
     * system.
     */
    @JsonGetter("reference_id")
    public String getReferenceId() {
        return this.referenceId;
    }

    /**
     * Getter for CatalogObjectId.
     * The Square generated ID of the
     * `CatalogObject` being tracked.
     */
    @JsonGetter("catalog_object_id")
    public String getCatalogObjectId() {
        return this.catalogObjectId;
    }

    /**
     * Getter for CatalogObjectType.
     * The `CatalogObjectType` of the
     * `CatalogObject` being tracked. Tracking is only
     * supported for the `ITEM_VARIATION` type.
     */
    @JsonGetter("catalog_object_type")
    public String getCatalogObjectType() {
        return this.catalogObjectType;
    }

    /**
     * Getter for State.
     * Indicates the state of a tracked item quantity in the lifecycle of goods.
     */
    @JsonGetter("state")
    public String getState() {
        return this.state;
    }

    /**
     * Getter for LocationId.
     * The Square ID of the [Location](#type-location) where the related
     * quantity of items are being tracked.
     */
    @JsonGetter("location_id")
    public String getLocationId() {
        return this.locationId;
    }

    /**
     * Getter for Quantity.
     * The number of items affected by the physical count as a decimal string.
     * Can support up to 5 digits after the decimal point.
     */
    @JsonGetter("quantity")
    public String getQuantity() {
        return this.quantity;
    }

    /**
     * Getter for Source.
     * Provides information about the application used to generate a change.
     */
    @JsonGetter("source")
    public SourceApplication getSource() {
        return this.source;
    }

    /**
     * Getter for EmployeeId.
     * The Square ID of the [Employee](#type-employee) responsible for the
     * physical count.
     */
    @JsonGetter("employee_id")
    public String getEmployeeId() {
        return this.employeeId;
    }

    /**
     * Getter for OccurredAt.
     * A client-generated timestamp in RFC 3339 format that indicates when
     * the physical count took place. For write actions, the `occurred_at`
     * timestamp cannot be older than 24 hours or in the future relative to the
     * time of the request.
     */
    @JsonGetter("occurred_at")
    public String getOccurredAt() {
        return this.occurredAt;
    }

    /**
     * Getter for CreatedAt.
     * A read-only timestamp in RFC 3339 format that indicates when Square
     * received the physical count.
     */
    @JsonGetter("created_at")
    public String getCreatedAt() {
        return this.createdAt;
    }

 
    @Override
    public int hashCode() {
        return Objects.hash(id, referenceId, catalogObjectId, catalogObjectType, state, locationId,
            quantity, source, employeeId, occurredAt, createdAt);
    }

    @Override
    public boolean equals(Object obj) {
        if(obj == this) {
            return true;
        }
        if(!(obj instanceof InventoryPhysicalCount)) {
            return false;
        }
        InventoryPhysicalCount inventoryPhysicalCount = (InventoryPhysicalCount) obj;
        return Objects.equals(id, inventoryPhysicalCount.id) &&
            Objects.equals(referenceId, inventoryPhysicalCount.referenceId) &&
            Objects.equals(catalogObjectId, inventoryPhysicalCount.catalogObjectId) &&
            Objects.equals(catalogObjectType, inventoryPhysicalCount.catalogObjectType) &&
            Objects.equals(state, inventoryPhysicalCount.state) &&
            Objects.equals(locationId, inventoryPhysicalCount.locationId) &&
            Objects.equals(quantity, inventoryPhysicalCount.quantity) &&
            Objects.equals(source, inventoryPhysicalCount.source) &&
            Objects.equals(employeeId, inventoryPhysicalCount.employeeId) &&
            Objects.equals(occurredAt, inventoryPhysicalCount.occurredAt) &&
            Objects.equals(createdAt, inventoryPhysicalCount.createdAt);
    }

    /**
     * Builds a new {@link InventoryPhysicalCount.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link InventoryPhysicalCount.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
            .id(getId())
            .referenceId(getReferenceId())
            .catalogObjectId(getCatalogObjectId())
            .catalogObjectType(getCatalogObjectType())
            .state(getState())
            .locationId(getLocationId())
            .quantity(getQuantity())
            .source(getSource())
            .employeeId(getEmployeeId())
            .occurredAt(getOccurredAt())
            .createdAt(getCreatedAt());
            return builder;
    }

    /**
     * Class to build instances of {@link InventoryPhysicalCount}
     */
    public static class Builder {
        private String id;
        private String referenceId;
        private String catalogObjectId;
        private String catalogObjectType;
        private String state;
        private String locationId;
        private String quantity;
        private SourceApplication source;
        private String employeeId;
        private String occurredAt;
        private String createdAt;

        /**
         * Initialization constructor
         */
        public Builder() {
           
        }

        /**
         * Setter for id
         * @param id
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }
        /**
         * Setter for referenceId
         * @param referenceId
         * @return Builder
         */
        public Builder referenceId(String referenceId) {
            this.referenceId = referenceId;
            return this;
        }
        /**
         * Setter for catalogObjectId
         * @param catalogObjectId
         * @return Builder
         */
        public Builder catalogObjectId(String catalogObjectId) {
            this.catalogObjectId = catalogObjectId;
            return this;
        }
        /**
         * Setter for catalogObjectType
         * @param catalogObjectType
         * @return Builder
         */
        public Builder catalogObjectType(String catalogObjectType) {
            this.catalogObjectType = catalogObjectType;
            return this;
        }
        /**
         * Setter for state
         * @param state
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }
        /**
         * Setter for locationId
         * @param locationId
         * @return Builder
         */
        public Builder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }
        /**
         * Setter for quantity
         * @param quantity
         * @return Builder
         */
        public Builder quantity(String quantity) {
            this.quantity = quantity;
            return this;
        }
        /**
         * Setter for source
         * @param source
         * @return Builder
         */
        public Builder source(SourceApplication source) {
            this.source = source;
            return this;
        }
        /**
         * Setter for employeeId
         * @param employeeId
         * @return Builder
         */
        public Builder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        /**
         * Setter for occurredAt
         * @param occurredAt
         * @return Builder
         */
        public Builder occurredAt(String occurredAt) {
            this.occurredAt = occurredAt;
            return this;
        }
        /**
         * Setter for createdAt
         * @param createdAt
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Builds a new {@link InventoryPhysicalCount} object using the set fields.
         * @return {@link InventoryPhysicalCount}
         */
        public InventoryPhysicalCount build() {
            return new InventoryPhysicalCount(id,
                referenceId,
                catalogObjectId,
                catalogObjectType,
                state,
                locationId,
                quantity,
                source,
                employeeId,
                occurredAt,
                createdAt);
        }
    }
}
