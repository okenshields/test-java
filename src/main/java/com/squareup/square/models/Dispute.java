package com.squareup.square.models;

import java.util.List;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonGetter;


/**
 * This is a model class for Dispute type.
 */
public class Dispute {

    /**
     * Initialization constructor.
     * @param disputeId
     * @param amountMoney
     * @param reason
     * @param state
     * @param dueAt
     * @param disputedPayment
     * @param evidenceIds
     * @param cardBrand
     * @param createdAt
     * @param updatedAt
     * @param brandDisputeId
     * @param reportedDate
     * @param version
     * @param locationId
     */
    @JsonCreator
    public Dispute(
            @JsonProperty("dispute_id") String disputeId,
            @JsonProperty("amount_money") Money amountMoney,
            @JsonProperty("reason") String reason,
            @JsonProperty("state") String state,
            @JsonProperty("due_at") String dueAt,
            @JsonProperty("disputed_payment") DisputedPayment disputedPayment,
            @JsonProperty("evidence_ids") List<String> evidenceIds,
            @JsonProperty("card_brand") String cardBrand,
            @JsonProperty("created_at") String createdAt,
            @JsonProperty("updated_at") String updatedAt,
            @JsonProperty("brand_dispute_id") String brandDisputeId,
            @JsonProperty("reported_date") String reportedDate,
            @JsonProperty("version") Integer version,
            @JsonProperty("location_id") String locationId) {
        this.disputeId = disputeId;
        this.amountMoney = amountMoney;
        this.reason = reason;
        this.state = state;
        this.dueAt = dueAt;
        this.disputedPayment = disputedPayment;
        this.evidenceIds = evidenceIds;
        this.cardBrand = cardBrand;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.brandDisputeId = brandDisputeId;
        this.reportedDate = reportedDate;
        this.version = version;
        this.locationId = locationId;
    }

    private final String disputeId;
    private final Money amountMoney;
    private final String reason;
    private final String state;
    private final String dueAt;
    private final DisputedPayment disputedPayment;
    private final List<String> evidenceIds;
    private final String cardBrand;
    private final String createdAt;
    private final String updatedAt;
    private final String brandDisputeId;
    private final String reportedDate;
    private final Integer version;
    private final String locationId;
    /**
     * Getter for DisputeId.
     * Unique ID for this `Dispute`, generated by Square.
     */
    @JsonGetter("dispute_id")
    public String getDisputeId() {
        return this.disputeId;
    }

    /**
     * Getter for AmountMoney.
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonGetter("amount_money")
    public Money getAmountMoney() {
        return this.amountMoney;
    }

    /**
     * Getter for Reason.
     * List of possible reasons why a cardholder might initiate a
     * dispute with their bank.
     */
    @JsonGetter("reason")
    public String getReason() {
        return this.reason;
    }

    /**
     * Getter for State.
     * List of possible dispute states.
     */
    @JsonGetter("state")
    public String getState() {
        return this.state;
    }

    /**
     * Getter for DueAt.
     * The time when the next action is due, in RFC 3339 format.
     */
    @JsonGetter("due_at")
    public String getDueAt() {
        return this.dueAt;
    }

    /**
     * Getter for DisputedPayment.
     * The payment the cardholder disputed.
     */
    @JsonGetter("disputed_payment")
    public DisputedPayment getDisputedPayment() {
        return this.disputedPayment;
    }

    /**
     * Getter for EvidenceIds.
     * The IDs of the evidence associated with the dispute.
     */
    @JsonGetter("evidence_ids")
    public List<String> getEvidenceIds() {
        return this.evidenceIds;
    }

    /**
     * Getter for CardBrand.
     * Indicates a card's brand, such as `VISA` or `MASTERCARD`.
     */
    @JsonGetter("card_brand")
    public String getCardBrand() {
        return this.cardBrand;
    }

    /**
     * Getter for CreatedAt.
     * Timestamp when the dispute was created, in RFC 3339 format.
     */
    @JsonGetter("created_at")
    public String getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for UpdatedAt.
     * Timestamp when dispute was last updated, in RFC 3339 format.
     */
    @JsonGetter("updated_at")
    public String getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Getter for BrandDisputeId.
     * ID of the dispute in the card brand system, generated by the card brand.
     */
    @JsonGetter("brand_dispute_id")
    public String getBrandDisputeId() {
        return this.brandDisputeId;
    }

    /**
     * Getter for ReportedDate.
     * Timestamp when the dispute was reported, in RFC 3339 format.
     */
    @JsonGetter("reported_date")
    public String getReportedDate() {
        return this.reportedDate;
    }

    /**
     * Getter for Version.
     * The current version of the `Dispute`.
     */
    @JsonGetter("version")
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Getter for LocationId.
     * The ID of location where dispute originated.
     */
    @JsonGetter("location_id")
    public String getLocationId() {
        return this.locationId;
    }

 
    @Override
    public int hashCode() {
        return Objects.hash(disputeId, amountMoney, reason, state, dueAt, disputedPayment,
            evidenceIds, cardBrand, createdAt, updatedAt, brandDisputeId, reportedDate, version,
            locationId);
    }

    @Override
    public boolean equals(Object obj) {
        if(obj == this) {
            return true;
        }
        if(!(obj instanceof Dispute)) {
            return false;
        }
        Dispute dispute = (Dispute) obj;
        return Objects.equals(disputeId, dispute.disputeId) &&
            Objects.equals(amountMoney, dispute.amountMoney) &&
            Objects.equals(reason, dispute.reason) &&
            Objects.equals(state, dispute.state) &&
            Objects.equals(dueAt, dispute.dueAt) &&
            Objects.equals(disputedPayment, dispute.disputedPayment) &&
            Objects.equals(evidenceIds, dispute.evidenceIds) &&
            Objects.equals(cardBrand, dispute.cardBrand) &&
            Objects.equals(createdAt, dispute.createdAt) &&
            Objects.equals(updatedAt, dispute.updatedAt) &&
            Objects.equals(brandDisputeId, dispute.brandDisputeId) &&
            Objects.equals(reportedDate, dispute.reportedDate) &&
            Objects.equals(version, dispute.version) &&
            Objects.equals(locationId, dispute.locationId);
    }

    /**
     * Builds a new {@link Dispute.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Dispute.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
            .disputeId(getDisputeId())
            .amountMoney(getAmountMoney())
            .reason(getReason())
            .state(getState())
            .dueAt(getDueAt())
            .disputedPayment(getDisputedPayment())
            .evidenceIds(getEvidenceIds())
            .cardBrand(getCardBrand())
            .createdAt(getCreatedAt())
            .updatedAt(getUpdatedAt())
            .brandDisputeId(getBrandDisputeId())
            .reportedDate(getReportedDate())
            .version(getVersion())
            .locationId(getLocationId());
            return builder;
    }

    /**
     * Class to build instances of {@link Dispute}
     */
    public static class Builder {
        private String disputeId;
        private Money amountMoney;
        private String reason;
        private String state;
        private String dueAt;
        private DisputedPayment disputedPayment;
        private List<String> evidenceIds;
        private String cardBrand;
        private String createdAt;
        private String updatedAt;
        private String brandDisputeId;
        private String reportedDate;
        private Integer version;
        private String locationId;

        /**
         * Initialization constructor
         */
        public Builder() {
           
        }

        /**
         * Setter for disputeId
         * @param disputeId
         * @return Builder
         */
        public Builder disputeId(String disputeId) {
            this.disputeId = disputeId;
            return this;
        }
        /**
         * Setter for amountMoney
         * @param amountMoney
         * @return Builder
         */
        public Builder amountMoney(Money amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }
        /**
         * Setter for reason
         * @param reason
         * @return Builder
         */
        public Builder reason(String reason) {
            this.reason = reason;
            return this;
        }
        /**
         * Setter for state
         * @param state
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }
        /**
         * Setter for dueAt
         * @param dueAt
         * @return Builder
         */
        public Builder dueAt(String dueAt) {
            this.dueAt = dueAt;
            return this;
        }
        /**
         * Setter for disputedPayment
         * @param disputedPayment
         * @return Builder
         */
        public Builder disputedPayment(DisputedPayment disputedPayment) {
            this.disputedPayment = disputedPayment;
            return this;
        }
        /**
         * Setter for evidenceIds
         * @param evidenceIds
         * @return Builder
         */
        public Builder evidenceIds(List<String> evidenceIds) {
            this.evidenceIds = evidenceIds;
            return this;
        }
        /**
         * Setter for cardBrand
         * @param cardBrand
         * @return Builder
         */
        public Builder cardBrand(String cardBrand) {
            this.cardBrand = cardBrand;
            return this;
        }
        /**
         * Setter for createdAt
         * @param createdAt
         * @return Builder
         */
        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        /**
         * Setter for updatedAt
         * @param updatedAt
         * @return Builder
         */
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }
        /**
         * Setter for brandDisputeId
         * @param brandDisputeId
         * @return Builder
         */
        public Builder brandDisputeId(String brandDisputeId) {
            this.brandDisputeId = brandDisputeId;
            return this;
        }
        /**
         * Setter for reportedDate
         * @param reportedDate
         * @return Builder
         */
        public Builder reportedDate(String reportedDate) {
            this.reportedDate = reportedDate;
            return this;
        }
        /**
         * Setter for version
         * @param version
         * @return Builder
         */
        public Builder version(Integer version) {
            this.version = version;
            return this;
        }
        /**
         * Setter for locationId
         * @param locationId
         * @return Builder
         */
        public Builder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * Builds a new {@link Dispute} object using the set fields.
         * @return {@link Dispute}
         */
        public Dispute build() {
            return new Dispute(disputeId,
                amountMoney,
                reason,
                state,
                dueAt,
                disputedPayment,
                evidenceIds,
                cardBrand,
                createdAt,
                updatedAt,
                brandDisputeId,
                reportedDate,
                version,
                locationId);
        }
    }
}
